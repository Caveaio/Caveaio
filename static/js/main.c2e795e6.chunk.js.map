{"version":3,"sources":["components/loader/pacMan.jsx","mainConfig.js","components/counters/textCounter.jsx","components/graphs/importedBarGraph.jsx","components/graphs/averagePerHour.jsx","components/averages.jsx","components/graphs/importedLineGraph.jsx","components/platformContent.jsx","components/importMetrics.jsx","App.jsx","platformConfig.js","reportWebVitals.js","index.js"],"names":["PacMan","className","type","size","active","config","TextCounter","Component","props","text","data","AveragePerHour","platform","state","loading","error","getAveragePerHour","bind","this","updateMetric","setInterval","clearInterval","axios","get","params","from","interval","then","response","avg","setState","catch","Averages","useState","averages","map","average","index","ImportedLineGraph","getTotalImports","x","moment","date","format","y","parseInt","count","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","XAxis","dataKey","stroke","YAxis","padding","Tooltip","Line","name","color","strokeWidth","PlatformContent","graphs","graph","header","total","ImportMetrics","id","loadImporterMetrics","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2e795e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Loader from \"react-loaders\";\r\n\r\nfunction PacMan() {\r\n  return (\r\n    <div className=\"h-40 flex justify-center items-center\">\r\n      <Loader type=\"pacman\" size={\"custom\"} active />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PacMan;\r\n","export const config = {\r\n  updateInterval: 60_000,\r\n  apiUrl: \"https://cavea-test-api-php-review-develop-3zknud.cavea.dev\",\r\n};\r\n","import React from \"react\";\r\n\r\nconst TextCounter = (props) => {\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      <h2 className=\"text-center font-semibold text-gray-900 dark:text-gray-200 text-2xl subpixel-antialiased\">\r\n        {props.text}\r\n      </h2>\r\n      <p className=\"text-center text-xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\r\n        {props.data}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextCounter;\r\n","import React, { Component } from \"react\";\nimport PacMan from \"../loader/pacMan\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport {\n  Bar,\n  BarChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { config } from \"../../mainConfig\";\n\nclass ImportedBarGraph extends Component {\n  constructor(props) {\n    super(props);\n    this.platform = this.props.platform;\n    this.type = this.props.type;\n    this.state = {\n      data: null,\n      loading: true,\n      error: null,\n    };\n    this.getTotalImports = this.getTotalImports.bind(this);\n  }\n\n  componentDidMount() {\n    this.getTotalImports();\n\n    this.updateMetric = setInterval(\n      this.getTotalImports,\n      config.updateInterval\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateMetric);\n  }\n\n  getTotalImports() {\n    axios\n      .get(`${config.apiUrl}/api/logs/import/total`, {\n        params: {\n          platform: this.platform,\n          type: this.type,\n          from: 30,\n        },\n      })\n      .then((response) => {\n        const data = [...response.data].map((data) => {\n          return {\n            x: moment(data.date).format(\"DD-MM-YYYY\"),\n            y: data.count,\n          };\n        });\n\n        this.setState({ data: data, loading: false });\n      })\n      .catch(() => {\n        return this.setState({ error: true, loading: false });\n      });\n  }\n\n  render() {\n    if (this.state.data && !this.state.error && !this.state.loading) {\n      return (\n        <div className=\"total\">\n          <ResponsiveContainer width=\"100%\" height={this.props.height}>\n            <BarChart\n              width={this.props.width}\n              height={this.props.height}\n              data={this.state.data}\n            >\n              <XAxis dataKey=\"x\" stroke={\"rgb(0 0 0)\"} />\n              <YAxis dataKey=\"y\" stroke={\"rgb(0 0 0)\"} />\n              <Tooltip />\n              <Bar dataKey=\"y\" name=\"Posts\" fill={this.props.fill} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      );\n    } else if (this.state.error) {\n      return (\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\n          An Error Occurred!\n        </p>\n      );\n    } else {\n      return <PacMan />;\n    }\n  }\n}\n\nexport default ImportedBarGraph;\n","import React, { Component } from \"react\";\nimport PacMan from \"../loader/pacMan\";\nimport axios from \"axios\";\nimport TextCounter from \"../counters/textCounter\";\nimport { config } from \"../../mainConfig\";\n\nclass AveragePerHour extends Component {\n  constructor(props) {\n    super(props);\n    this.platform = this.props.platform;\n    this.type = this.props.type;\n    this.state = {\n      data: null,\n      loading: true,\n      error: null,\n    };\n    this.getAveragePerHour = this.getAveragePerHour.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAveragePerHour();\n\n    this.updateMetric = setInterval(\n      this.getAveragePerHour,\n      config.updateInterval\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateMetric);\n  }\n\n  getAveragePerHour() {\n    axios\n      .get(`${config.apiUrl}/api/logs/import/average`, {\n        params: {\n          platform: this.platform,\n          from: 30,\n          type: this.type,\n          interval: 3600, // One hour\n        },\n      })\n      .then((response) => {\n        const { avg } = response.data;\n        this.setState({ data: avg, loading: false });\n      })\n      .catch(() => {\n        return this.setState({ error: true, loading: false });\n      });\n  }\n\n  render() {\n    if (this.state.data && !this.state.error && !this.state.loading) {\n      return <TextCounter data={this.state.data} text={this.props.text} />;\n    } else if (this.state.error) {\n      return (\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\n          An Error Occurred!\n        </p>\n      );\n    } else {\n      return <PacMan />;\n    }\n  }\n}\n\nexport default AveragePerHour;\n","import React, { useState } from \"react\";\r\nimport AveragePerHour from \"./graphs/averagePerHour\";\r\n\r\nfunction Averages(props) {\r\n  const [averages] = useState([...props.averages]);\r\n  return (\r\n    <div className=\"averages grid gap-y-3\">\r\n      {averages.map((average, index) => {\r\n        return (\r\n          <div\r\n            className={average.type + \"-per-hour\"}\r\n            key={average.type + index}\r\n          >\r\n            <AveragePerHour\r\n              platform={props.platform}\r\n              type={average.type}\r\n              text={average.text}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Averages;\r\n","import React, { Component } from \"react\";\nimport PacMan from \"../loader/pacMan\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport {\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { config } from \"../../mainConfig\";\n\nclass ImportedLineGraph extends Component {\n  constructor(props) {\n    super(props);\n    this.platform = this.props.platform;\n    this.type = this.props.type;\n    this.state = {\n      data: null,\n      loading: true,\n      error: null,\n    };\n    this.getTotalImports = this.getTotalImports.bind(this);\n  }\n\n  componentDidMount() {\n    this.getTotalImports();\n\n    this.updateMetric = setInterval(\n      this.getTotalImports,\n      config.updateInterval\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateMetric);\n  }\n\n  getTotalImports() {\n    axios\n      .get(`${config.apiUrl}/api/logs/import/total`, {\n        params: {\n          platform: this.platform,\n          type: this.type,\n          from: 30,\n        },\n      })\n      .then((response) => {\n        const data = [...response.data].map((data) => {\n          return {\n            x: moment(data.date).format(\"YYYY-MM-DD\"),\n            y: parseInt(data.count),\n          };\n        });\n\n        this.setState({ data: data, loading: false });\n      })\n      .catch(() => {\n        return this.setState({ error: true, loading: false });\n      });\n  }\n\n  render() {\n    if (this.state.data && !this.state.error && !this.state.loading) {\n      return (\n        <ResponsiveContainer width=\"100%\" height={this.props.height}>\n          <LineChart\n            data={this.state.data}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n          >\n            <XAxis dataKey=\"x\" stroke=\"#000000\" />\n            <YAxis dataKey=\"y\" stroke=\"#000000\" padding={{ top: 25 }} />\n            <Tooltip />\n            <Line\n              dataKey=\"y\"\n              name=\"Posts\"\n              stroke={this.props.color}\n              strokeWidth={5}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      );\n    } else if (this.state.error) {\n      return (\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\n          An Error Occurred!\n        </p>\n      );\n    } else {\n      return <PacMan />;\n    }\n  }\n}\n\nexport default ImportedLineGraph;\n","import React, { useState } from \"react\";\nimport ImportedBarGraph from \"./graphs/importedBarGraph\";\nimport Averages from \"./averages\";\nimport ImportedLineGraph from \"./graphs/importedLineGraph\";\n\nfunction PlatformContent(props) {\n  const [graphs] = useState([...props.graphs]);\n\n  return graphs.map((graph, index) => {\n    return (\n      <div\n        className=\"metric space-y-5\"\n        key={graph.platform + graph.header + index}\n      >\n        <h2 className=\"text-left font-semibold text-gray-900 dark:text-gray-200 text-2xl subpixel-antialiased\">\n          {graph.header}\n        </h2>\n        <div className=\"grid grid-cols-2\">\n          <ImportedLineGraph\n            platform={props.platform}\n            color={props.color}\n            type={graph.total.type}\n            width={200}\n            height={150}\n          />\n          <Averages averages={graph.averages} platform={props.platform} />\n        </div>\n      </div>\n    );\n  });\n}\n\nexport default PlatformContent;\n","import React from \"react\";\r\nimport PlatformContent from \"./platformContent\";\r\n\r\nfunction ImportMetrics(props) {\r\n  return (\r\n    <div id={props.platform + \"-metric\"} className=\"space-y-5\">\r\n      <h2 className=\"capitalize text-left font-bold text-3xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\r\n        {props.platform}\r\n      </h2>\r\n      <div className=\"grid gap-y-3 items-start\">\r\n        <PlatformContent\r\n          graphs={props.graphs}\r\n          platform={props.platform}\r\n          color={props.color}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImportMetrics;\r\n","import ImportMetrics from \"./components/importMetrics\";\r\nimport { platforms } from \"./platformConfig\";\r\n\r\nconst loadImporterMetrics = platforms.map((platform, index) => {\r\n  return <ImportMetrics {...platform} key={platform.platform} />;\r\n});\r\n\r\n/*const loadAiMetrics = platforms.map((platform) => {\r\n  return <ImportMetrics {...platform} />;\r\n});*/\r\n\r\nconst App = () => (\r\n  <div className=\"p-10 mx-auto\">\r\n    <div className=\"grid grid-cols-1 gap-6\">{loadImporterMetrics}</div>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","export const platforms = [\n  {\n    platform: \"facebook\",\n    color: \"#4267B2\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Posts/h\",\n          },\n        ],\n      },\n      /*{\n        header: \"Streams\",\n        total: {\n          type: \"stream_imported\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"stream_imported\",\n            text: \"Avg. Streams/h\",\n          },\n        ],\n      },*/\n    ],\n  },\n  {\n    platform: \"instagram\",\n    color: \"#C13584\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Posts/h\",\n          },\n        ],\n      },\n      {\n        header: \"Stories\",\n        total: {\n          type: \"story_count\",\n        },\n        averages: [\n          {\n            type: \"process_story_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"story_created\",\n            text: \"Avg. Stories/h\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    platform: \"twitch\",\n    color: \"#6441a5\",\n    graphs: [\n      {\n        header: \"Clips\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Clips/h\",\n          },\n        ],\n      },\n      /*{\n        header: \"Streams\",\n        total: {\n          type: \"stream_imported\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"stream_imported\",\n            text: \"Avg. Streams/h\",\n          },\n        ],\n      },*/\n    ],\n  },\n  {\n    platform: \"twitter\",\n    color: \"#1DA1F2\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"Avg. Posts/h\",\n          },\n        ],\n      },\n      {\n        header: \"Metrics\",\n        total: {\n          type: \"post_metric_count\",\n        },\n        averages: [\n          {\n            type: \"process_metric_handle\",\n            text: \"Avg. Handles/h\",\n          },\n          {\n            type: \"post_metric_imported\",\n            text: \"Avg. Posts/h\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    platform: \"youtube\",\n    color: \"#FF0000\",\n    graphs: [\n      {\n        header: \"Videos\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Videos/h\",\n          },\n        ],\n      },\n      /*{\n        header: \"Streams\",\n        total: {\n          type: \"stream_imported\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"stream_imported\",\n            text: \"Avg. Streams/h\",\n          },\n        ],\n      },*/\n    ],\n  },\n  /*{\n    platform: \"trovo\",\n    color: \"#FF0000\",\n    graphs: [\n      {\n        header: \"Streams\",\n        total: {\n          type: \"stream_imported\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"stream_imported\",\n            text: \"Avg. Streams/h\",\n          },\n        ],\n      },\n      {\n        header: \"Clips?!?\",\n        total: {\n          type: \"post_imported\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Clips/h/h\",\n          },\n        ],\n      },\n    ],\n  },*/\n];\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}