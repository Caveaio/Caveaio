{"version":3,"sources":["components/loader/pacMan.jsx","components/counters/TextCounter.jsx","config/Settings.js","components/graphs/importers/Average.jsx","components/importers/Averages.jsx","helpers/reverseCalcDates.js","components/graphs/importers/LineGraph.jsx","components/graphs/importers/Runtime.jsx","components/importers/Runtimes.jsx","components/PlatformContent.jsx","components/ImportMetrics.jsx","components/graphs/ai/AIBarGraph.jsx","components/AIContent.jsx","components/AIMetrics.jsx","App.jsx","config/Importers.js","config/AIs.js","reportWebVitals.js","index.js"],"names":["PacMan","className","type","size","active","TextCounter","props","text","data","config","Average","platform","state","loading","error","getAverage","bind","this","updateMetric","setInterval","clearInterval","url","endpoint","includes","axios","get","params","then","response","avg","setState","catch","Component","Averages","useState","averages","map","average","index","reverseCalcDates","i","results","reverse_api_result","now","Date","get_date","date","dayjs","format","count","push","setDate","getDate","reverse","LineGraph","getTotalImports","logs","x","y","parseInt","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","stroke","tick","YAxis","Tooltip","Line","name","color","strokeWidth","Runtime","getRuntime","e","barHeight","style","position","background","display","alignItems","runtime","right","top","backgroundColor","zIndex","paddingLeft","sleep_time","philipMethod","Runtimes","runtimes","PlatformContent","graphs","graph","header","total","ImportMetrics","id","AIBarGraph","boxName","getLogs","console","log","BarChart","Bar","fill","subTitle","AIMetrics","AIContent","loadImporterMetrics","key","loadAIMetrics","aibox_id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72a2a180.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Loader from \"react-loaders\";\r\n\r\nfunction PacMan() {\r\n  return (\r\n    <div className=\"h-40 flex justify-center items-center\">\r\n      <Loader type=\"pacman\" size={\"custom\"} active />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PacMan;\r\n","import React from \"react\"\n\nconst TextCounter = (props) => {\n  return (\n    <p className=\"text-left text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\n      {props.text}: {props.data}\n    </p>\n  )\n}\n\nexport default TextCounter\n","export const config = {\r\n  updateInterval: 60_000,\r\n  logUrl: \"https://cavea-test-api-php-review-develop-3zknud.cavea.dev\",\r\n  localUrl: \"http://127.0.0.1:8000\",\r\n  graphHeight: 120,\r\n}\r\n","import React, { Component } from \"react\"\r\nimport PacMan from \"../../loader/pacMan\"\r\nimport axios from \"axios\"\r\nimport TextCounter from \"../../counters/TextCounter\"\r\nimport { config } from \"../../../config/Settings\"\r\n\r\nclass Average extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.platform = this.props.platform\r\n    this.type = this.props.type\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: false,\r\n    }\r\n    this.getAverage = this.getAverage.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAverage()\r\n\r\n    this.updateMetric = setInterval(this.getAverage, config.updateInterval)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric)\r\n  }\r\n\r\n  getAverage() {\r\n    let endpoint = \"average\",\r\n      url\r\n    if (this.type.includes(\"_count\")) endpoint = \"aph\"\r\n\r\n    url = `${config.logUrl}/api/logs/import/${endpoint}`\r\n\r\n    axios\r\n      .get(`${url}`, {\r\n        params: {\r\n          platform: this.platform,\r\n          type: this.type,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const { avg } = response.data\r\n        this.setState({ data: avg, loading: false, error: false })\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return <TextCounter data={this.state.data} text={this.props.text} />\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\r\n          An Error Occurred!\r\n        </p>\r\n      )\r\n    } else {\r\n      return <PacMan />\r\n    }\r\n  }\r\n}\r\n\r\nexport default Average\r\n","import React, { useState } from \"react\"\r\nimport Average from \"../graphs/importers/Average\"\r\n\r\nfunction Averages(props) {\r\n  const [averages] = useState([...props.data])\r\n  return (\r\n    <>\r\n      {averages.map((average, index) => {\r\n        return (\r\n          <Average\r\n            key={\"average-\" + index}\r\n            platform={props.platform}\r\n            type={average.type}\r\n            text={average.text}\r\n          />\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Averages\r\n","import dayjs from \"dayjs\"\r\n\r\nexport function reverseCalcDates(data) {\r\n  let i,\r\n    results = [],\r\n    reverse_api_result = {}\r\n  let now = new Date()\r\n  let targetDays = 30\r\n  const get_date = (date) => {\r\n    return dayjs(date).format(\"YYYY-MM-DD\")\r\n  }\r\n\r\n  data.map((data) => {\r\n    return (reverse_api_result[data.date] = data.count)\r\n  })\r\n\r\n  for (i = targetDays; i > 0; --i) {\r\n    results.push({\r\n      date: get_date(now),\r\n      count: reverse_api_result[get_date(now)] || 0,\r\n    })\r\n\r\n    now.setDate(now.getDate() - 1)\r\n  }\r\n\r\n  return results.reverse()\r\n}\r\n","import React, { Component } from \"react\"\r\nimport PacMan from \"../../loader/pacMan\"\r\nimport axios from \"axios\"\r\nimport {\r\n  Line,\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\"\r\nimport { config } from \"../../../config/Settings\"\r\nimport dayjs from \"dayjs\"\r\nimport { reverseCalcDates } from \"../../../helpers/reverseCalcDates\"\r\n\r\nclass LineGraph extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.platform = this.props.platform\r\n    this.type = this.props.type\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: null,\r\n    }\r\n    this.getTotalImports = this.getTotalImports.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTotalImports()\r\n\r\n    this.updateMetric = setInterval(this.getTotalImports, config.updateInterval)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric)\r\n  }\r\n\r\n  getTotalImports() {\r\n    axios\r\n      .get(`${config.logUrl}/api/logs/import/count_by_date`, {\r\n        params: {\r\n          platform: this.platform,\r\n          type: this.type,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const reverse_result = reverseCalcDates(response.data)\r\n        const logs = reverse_result.map((data) => {\r\n          return {\r\n            x: dayjs(data.date).format(\"YYYY-MM-DD\"),\r\n            y: parseInt(data.count),\r\n          }\r\n        })\r\n\r\n        this.setState({ data: logs, loading: false, error: false })\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return (\r\n        <ResponsiveContainer width=\"100%\" height={config.graphHeight}>\r\n          <LineChart data={this.state.data}>\r\n            <XAxis dataKey=\"x\" stroke=\"#222\" tick={false} />\r\n            <YAxis dataKey=\"y\" stroke=\"#222\" />\r\n            <Tooltip />\r\n            <Line\r\n              dataKey=\"y\"\r\n              name=\"Count\"\r\n              stroke={this.props.color}\r\n              strokeWidth={5}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\r\n          An Error Occurred!\r\n        </p>\r\n      )\r\n    } else {\r\n      return <PacMan />\r\n    }\r\n  }\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { Component } from \"react\"\nimport PacMan from \"../../loader/pacMan\"\nimport axios from \"axios\"\nimport { config } from \"../../../config/Settings\"\n\nclass Runtime extends Component {\n  constructor(props) {\n    super(props)\n    this.platform = this.props.platform\n    this.type = this.props.type\n    this.state = {\n      data: null,\n      loading: true,\n      error: null,\n    }\n    this.getRuntime = this.getRuntime.bind(this)\n  }\n\n  componentDidMount() {\n    this.getRuntime()\n\n    this.updateMetric = setInterval(this.getRuntime, config.updateInterval)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateMetric)\n  }\n\n  getRuntime() {\n    axios\n      .get(\n        `https://cavea-test-api-php-review-develop-3zknud.cavea.dev/api/logs/import/runtime`,\n        {\n          params: {\n            platform: this.platform,\n            type: this.type,\n          },\n        }\n      )\n      .then((response) => {\n        this.setState({ data: response.data, loading: false, error: false })\n      })\n      .catch((e) => {\n        return this.setState({ error: e, loading: false })\n      })\n  }\n\n  philipMethod() {\n    const barHeight = \"20px\"\n\n    return (\n      <div\n        className=\"health_container\"\n        style={{\n          width: \"100px\",\n          height: barHeight,\n          position: \"relative\",\n          background:\n            \"linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,255,0,1) 25%, rgba(26,255,0,1) 100%)\",\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          className=\"health_bar\"\n          style={{\n            height: barHeight,\n            width: `${this.state.data.runtime}%`,\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            backgroundColor: \"lightgrey\",\n            zIndex: 1,\n          }}\n        />\n        <p\n          className=\"subpixel-antialiased\"\n          style={{ zIndex: 2, paddingLeft: \"20px\", color: \"rebeccapurple\" }}\n        >\n          {this.state.data.sleep_time}%\n        </p>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.data && !this.state.error && !this.state.loading) {\n      return this.philipMethod()\n    } else if (this.state.error) {\n      return (\n        <p className=\"text-center text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\n          An Error Occurred!\n        </p>\n      )\n    } else {\n      return <PacMan />\n    }\n  }\n}\n\nexport default Runtime\n","import React, { useState } from \"react\"\r\nimport Runtime from \"../graphs/importers/Runtime\"\r\n\r\nfunction Runtimes(props) {\r\n  const [runtimes] = useState([...props.data])\r\n  return (\r\n    <>\r\n      {runtimes.map((runtime, index) => {\r\n        return (\r\n          <Runtime\r\n            key={\"runtime-\" + index}\r\n            platform={props.platform}\r\n            type={runtime.type}\r\n            text={runtime.text}\r\n          />\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Runtimes\r\n","import React, { useState } from \"react\"\nimport Averages from \"./importers/Averages\"\nimport LineGraph from \"./graphs/importers/LineGraph\"\nimport Runtimes from \"./importers/Runtimes\"\n\nfunction PlatformContent(props) {\n  const [graphs] = useState([...props.graphs])\n\n  return graphs.map((graph, index) => {\n    return (\n      <div\n        className=\"metric grid grid-cols-9\"\n        key={graph.platform + graph.header + index}\n      >\n        <div className=\"metric-header grid grid-flow-row auto-rows-min col-span-2\">\n          <div className=\"grid grid-flow-col items-center\">\n            <h2 className=\"text-left font-semibold text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\n              {graph.header}\n            </h2>\n            <Runtimes data={graph.runtime} platform={props.platform} />\n          </div>\n          <Averages data={graph.averages} platform={props.platform} />\n        </div>\n        <div className=\"col-span-7\">\n          <LineGraph\n            platform={props.platform}\n            color={props.color}\n            type={graph.total.type}\n            width={200}\n            height={120}\n          />\n        </div>\n      </div>\n    )\n  })\n}\n\nexport default PlatformContent\n","import React from \"react\"\nimport PlatformContent from \"./PlatformContent\"\n\nfunction ImportMetrics(props) {\n  return (\n    <div id={props.platform + \"-metric\"} className=\"grid\">\n      <h2 className=\"capitalize text-left font-bold text-3xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\n        {props.platform}\n      </h2>\n      <PlatformContent\n        graphs={props.graphs}\n        platform={props.platform}\n        color={props.color}\n      />\n    </div>\n  )\n}\n\nexport default ImportMetrics\n","import React, { Component } from \"react\"\r\nimport PacMan from \"../../loader/pacMan\"\r\nimport axios from \"axios\"\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\"\r\nimport { config } from \"../../../config/Settings\"\r\nimport dayjs from \"dayjs\"\r\nimport { reverseCalcDates } from \"../../../helpers/reverseCalcDates\"\r\n\r\nclass AIBarGraph extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.boxName = this.props.boxName\r\n    this.params = this.props.params\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: null,\r\n    }\r\n    this.getLogs = this.getLogs.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getLogs()\r\n\r\n    this.updateMetric = setInterval(this.getLogs, config.updateInterval)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric)\r\n  }\r\n\r\n  getLogs() {\r\n    axios\r\n      .get(`${config.logUrl}/api/logs/ai/count_by_date`, {\r\n        params: this.params,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data)\r\n        const reverse_result = reverseCalcDates(response.data)\r\n        const logs = reverse_result.map((data) => {\r\n          return {\r\n            x: dayjs(data.date).format(\"YYYY-MM-DD\"),\r\n            y: parseInt(data.count),\r\n          }\r\n        })\r\n\r\n        this.setState({ data: logs, loading: false, error: false })\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return (\r\n        <ResponsiveContainer width=\"100%\" height={config.graphHeight}>\r\n          <BarChart data={this.state.data}>\r\n            <XAxis dataKey=\"x\" stroke=\"#222\" tick={false} />\r\n            <YAxis dataKey=\"y\" stroke=\"#222\" />\r\n            <Tooltip />\r\n            <Bar dataKey=\"y\" name=\"Count\" fill={this.props.color} />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      )\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\r\n          An Error Occurred!\r\n        </p>\r\n      )\r\n    } else {\r\n      return <PacMan />\r\n    }\r\n  }\r\n}\r\n\r\nexport default AIBarGraph\r\n","import React from \"react\"\nimport AIBarGraph from \"./graphs/ai/AIBarGraph\"\n\nfunction PlatformContent(props) {\n  console.log(props)\n\n  return (\n    <div className=\"metric grid grid-cols-9\">\n      <div className=\"metric-header grid grid-flow-row auto-rows-min col-span-2\">\n        <h2 className=\"text-left font-semibold text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\n          {props.subTitle}\n        </h2>\n      </div>\n      <div className=\"col-span-7\">\n        <AIBarGraph {...props} />\n      </div>\n    </div>\n  )\n}\n\nexport default PlatformContent\n","import React from \"react\"\r\nimport AIContent from \"./AIContent\"\r\n\r\nfunction AIMetrics(props) {\r\n  return (\r\n    <div id={props.boxName + \"-metric\"} className=\"grid gap-y-3\">\r\n      <h2 className=\"capitalize text-left font-bold text-3xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\r\n        {props.boxName}\r\n      </h2>\r\n      <AIContent {...props} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AIMetrics\r\n","import ImportMetrics from \"./components/ImportMetrics\"\nimport AIMetrics from \"./components/AIMetrics\"\nimport { importers } from \"./config/Importers\"\nimport { AI } from \"./config/AIs\"\n\nconst loadImporterMetrics = importers.map((platform) => {\n  return <ImportMetrics {...platform} key={platform.platform} />\n})\nconst loadAIMetrics = AI.map((platform) => {\n  return <AIMetrics {...platform} key={platform.platform} />\n})\n\nconst App = () => (\n  <div className=\"p-5 mx-auto grid md:grid-cols-1 lg:grid-cols-2 gap-x-5\">\n    <div className=\"import-logs\">{loadImporterMetrics}</div>\n    <div className=\"ai-logs\">{loadAIMetrics}</div>\n  </div>\n)\n\nexport default App\n","export const importers = [\n  {\n    platform: \"facebook\",\n    color: \"#4267B2\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [],\n      },\n      {\n        header: \"Live\",\n        total: {\n          type: \"streams_count\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"streams_count\",\n            text: \"S/h\",\n          },\n        ],\n        runtime: [],\n      },\n    ],\n  },\n  {\n    platform: \"instagram\",\n    color: \"#C13584\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [],\n      },\n      {\n        header: \"Stories\",\n        total: {\n          type: \"story_count\",\n        },\n        averages: [\n          {\n            type: \"process_story_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"story_count\",\n            text: \"S/h\",\n          },\n        ],\n        runtime: [],\n      },\n    ],\n  },\n  {\n    platform: \"twitch\",\n    color: \"#6441a5\",\n    graphs: [\n      {\n        header: \"Clips\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [],\n      },\n      {\n        header: \"Live\",\n        total: {\n          type: \"streams_count\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"streams_count\",\n            text: \"S/h\",\n          },\n        ],\n        runtime: [],\n      },\n    ],\n  },\n  {\n    platform: \"twitter\",\n    color: \"#1DA1F2\",\n    graphs: [\n      {\n        header: \"Posts\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [\n          {\n            type: \"sleep_timer\",\n            text: \"Idle% = x / 1,44\",\n          },\n        ],\n      },\n      {\n        header: \"Metrics\",\n        total: {\n          type: \"post_metric_count\",\n        },\n        averages: [\n          {\n            type: \"process_metric_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_metric_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [],\n      },\n    ],\n  },\n  {\n    platform: \"youtube\",\n    color: \"#FF0000\",\n    graphs: [\n      {\n        header: \"Videos\",\n        total: {\n          type: \"post_count\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"post_count\",\n            text: \"P/h\",\n          },\n        ],\n        runtime: [\n          {\n            type: \"sleep_timer\",\n            text: \"Idle% = x / 1,44\",\n          },\n        ],\n      },\n      {\n        header: \"Live\",\n        total: {\n          type: \"streams_count\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"H/h\",\n          },\n          {\n            type: \"streams_count\",\n            text: \"S/h\",\n          },\n        ],\n        runtime: [],\n      },\n    ],\n  },\n  /*{\n    platform: \"trovo\",\n    color: \"#FF0000\",\n    graphs: [\n      {\n        header: \"Streams\",\n        total: {\n          type: \"stream_imported\",\n        },\n        averages: [\n          {\n            type: \"process_stream_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"stream_imported\",\n            text: \"Avg. Streams/h\",\n          },\n        ],\n      },\n      {\n        header: \"Clips?!?\",\n        total: {\n          type: \"post_imported\",\n        },\n        averages: [\n          {\n            type: \"process_handle\",\n            text: \"Avg. Channels/h\",\n          },\n          {\n            type: \"post_imported\",\n            text: \"Avg. Clips/h/h\",\n          },\n        ],\n      },\n    ],\n  },*/\n]\n","export const AI = [\r\n  {\r\n    boxName: \"AIBOX1\",\r\n    subTitle: \"AI Runs\",\r\n    color: \"#F30482\",\r\n    params: {\r\n      aibox_id: \"AIBOX1\",\r\n    },\r\n  },\r\n]\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}