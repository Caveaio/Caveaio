{"version":3,"sources":["components/loader/pacMan.jsx","mainConfig.js","components/counters/textCounter.jsx","components/graphs/importedBarGraph.jsx","components/graphs/averagePerHour.jsx","components/averages.jsx","components/graphs/importedLineGraph.jsx","components/platformContent.jsx","components/importMetrics.jsx","App.jsx","platformConfig.js","reportWebVitals.js","index.js"],"names":["PacMan","className","type","size","active","config","TextCounter","Component","props","text","data","AveragePerHour","platform","state","loading","error","getAveragePerHour","bind","this","updateMetric","setInterval","clearInterval","axios","get","params","from","interval","then","response","avg","setState","catch","Averages","useState","averages","map","average","index","ImportedLineGraph","getTotalImports","x","moment","date","format","y","parseInt","count","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","stroke","YAxis","Tooltip","Line","name","color","strokeWidth","PlatformContent","graphs","graph","header","total","ImportMetrics","id","loadImporterMetrics","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.daf93613.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Loader from \"react-loaders\";\r\n\r\nfunction PacMan() {\r\n  return (\r\n    <div className=\"h-40 flex justify-center items-center\">\r\n      <Loader type=\"pacman\" size={\"custom\"} active />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PacMan;\r\n","export const config = {\r\n  updateInterval: 60_000,\r\n  apiUrl: \"https://cavea-test-api-php-review-develop-3zknud.cavea.dev\",\r\n};\r\n","import React from \"react\";\n\nconst TextCounter = (props) => {\n  return (\n    <div className=\"space-y-3\">\n      <p className=\"text-center font-semibold text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\n        {props.text}\n      </p>\n      <p className=\"text-center text-xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\n        {props.data}\n      </p>\n    </div>\n  );\n};\n\nexport default TextCounter;\n","import React, { Component } from \"react\";\r\nimport PacMan from \"../loader/pacMan\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { config } from \"../../mainConfig\";\r\n\r\nclass ImportedBarGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.platform = this.props.platform;\r\n    this.type = this.props.type;\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: null,\r\n    };\r\n    this.getTotalImports = this.getTotalImports.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTotalImports();\r\n\r\n    this.updateMetric = setInterval(\r\n      this.getTotalImports,\r\n      config.updateInterval\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric);\r\n  }\r\n\r\n  getTotalImports() {\r\n    axios\r\n      .get(`${config.apiUrl}/api/logs/import/total`, {\r\n        params: {\r\n          platform: this.platform,\r\n          type: this.type,\r\n          from: 30,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const data = [...response.data].map((data) => {\r\n          return {\r\n            x: moment(data.date).format(\"DD-MM-YYYY\"),\r\n            y: data.count,\r\n          };\r\n        });\r\n\r\n        this.setState({ data: data, loading: false });\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return (\r\n        <div className=\"total\">\r\n          <ResponsiveContainer width=\"100%\" height={this.props.height}>\r\n            <BarChart\r\n              width={this.props.width}\r\n              height={this.props.height}\r\n              data={this.state.data}\r\n            >\r\n              <XAxis dataKey=\"x\" stroke={\"rgb(0 0 0)\"} />\r\n              <YAxis dataKey=\"y\" stroke={\"rgb(0 0 0)\"} />\r\n              <Tooltip />\r\n              <Bar dataKey=\"y\" name=\"Posts\" fill={this.props.fill} />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      );\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\r\n          An Error Occurred!\r\n        </p>\r\n      );\r\n    } else {\r\n      return <PacMan />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ImportedBarGraph;\r\n","import React, { Component } from \"react\";\r\nimport PacMan from \"../loader/pacMan\";\r\nimport axios from \"axios\";\r\nimport TextCounter from \"../counters/textCounter\";\r\nimport { config } from \"../../mainConfig\";\r\n\r\nclass AveragePerHour extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.platform = this.props.platform;\r\n    this.type = this.props.type;\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: null,\r\n    };\r\n    this.getAveragePerHour = this.getAveragePerHour.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAveragePerHour();\r\n\r\n    this.updateMetric = setInterval(\r\n      this.getAveragePerHour,\r\n      config.updateInterval\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric);\r\n  }\r\n\r\n  getAveragePerHour() {\r\n    axios\r\n      .get(`${config.apiUrl}/api/logs/import/average`, {\r\n        params: {\r\n          platform: this.platform,\r\n          from: 30,\r\n          type: this.type,\r\n          interval: 3600, // One hour\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const { avg } = response.data;\r\n        this.setState({ data: avg, loading: false });\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return <TextCounter data={this.state.data} text={this.props.text} />;\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\r\n          An Error Occurred!\r\n        </p>\r\n      );\r\n    } else {\r\n      return <PacMan />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AveragePerHour;\r\n","import React, { useState } from \"react\";\nimport AveragePerHour from \"./graphs/averagePerHour\";\n\nfunction Averages(props) {\n  const [averages] = useState([...props.averages]);\n  return (\n    <>\n      {averages.map((average, index) => {\n        return (\n          <div\n            className={average.type + \"-per-hour\"}\n            key={average.type + index}\n          >\n            <AveragePerHour\n              platform={props.platform}\n              type={average.type}\n              text={average.text}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n\nexport default Averages;\n","import React, { Component } from \"react\";\r\nimport PacMan from \"../loader/pacMan\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Line,\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n} from \"recharts\";\r\nimport { config } from \"../../mainConfig\";\r\n\r\nclass ImportedLineGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.platform = this.props.platform;\r\n    this.type = this.props.type;\r\n    this.state = {\r\n      data: null,\r\n      loading: true,\r\n      error: null,\r\n    };\r\n    this.getTotalImports = this.getTotalImports.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTotalImports();\r\n\r\n    this.updateMetric = setInterval(\r\n      this.getTotalImports,\r\n      config.updateInterval\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.updateMetric);\r\n  }\r\n\r\n  getTotalImports() {\r\n    axios\r\n      .get(`${config.apiUrl}/api/logs/import/total`, {\r\n        params: {\r\n          platform: this.platform,\r\n          type: this.type,\r\n          from: 30,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const data = [...response.data].map((data) => {\r\n          return {\r\n            x: moment(data.date).format(\"YYYY-MM-DD\"),\r\n            y: parseInt(data.count),\r\n          };\r\n        });\r\n\r\n        this.setState({ data: data, loading: false });\r\n      })\r\n      .catch(() => {\r\n        return this.setState({ error: true, loading: false });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data && !this.state.error && !this.state.loading) {\r\n      return (\r\n        <ResponsiveContainer width=\"100%\" height={this.props.height}>\r\n          <LineChart data={this.state.data}>\r\n            <XAxis dataKey=\"x\" stroke=\"#000000\" />\r\n            <YAxis dataKey=\"y\" stroke=\"#000000\" />\r\n            <Tooltip />\r\n            <Line\r\n              dataKey=\"y\"\r\n              name=\"Posts\"\r\n              stroke={this.props.color}\r\n              strokeWidth={5}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      );\r\n    } else if (this.state.error) {\r\n      return (\r\n        <p className=\"text-center text-gray-900 dark:text-gray-200\">\r\n          An Error Occurred!\r\n        </p>\r\n      );\r\n    } else {\r\n      return <PacMan />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ImportedLineGraph;\r\n","import React, { useState } from \"react\";\r\nimport ImportedBarGraph from \"./graphs/importedBarGraph\";\r\nimport Averages from \"./averages\";\r\nimport ImportedLineGraph from \"./graphs/importedLineGraph\";\r\n\r\nfunction PlatformContent(props) {\r\n  const [graphs] = useState([...props.graphs]);\r\n\r\n  return graphs.map((graph, index) => {\r\n    return (\r\n      <div\r\n        className=\"metric space-y-5\"\r\n        key={graph.platform + graph.header + index}\r\n      >\r\n        <div className=\"grid grid-rows-1 items-center\">\r\n          <h2 className=\"text-left font-semibold text-gray-900 dark:text-gray-200 text-xl subpixel-antialiased\">\r\n            {graph.header}\r\n          </h2>\r\n          <Averages averages={graph.averages} platform={props.platform} />\r\n        </div>\r\n        <ImportedLineGraph\r\n          platform={props.platform}\r\n          color={props.color}\r\n          type={graph.total.type}\r\n          width={200}\r\n          height={150}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport default PlatformContent;\r\n","import React from \"react\";\nimport PlatformContent from \"./platformContent\";\n\nfunction ImportMetrics(props) {\n  return (\n    <div id={props.platform + \"-metric\"} className=\"space-y-5\">\n      <h2 className=\"capitalize text-left font-bold text-3xl text-gray-900 dark:text-gray-200 subpixel-antialiased\">\n        {props.platform}\n      </h2>\n      <div className=\"grid gap-y-3 items-start\">\n        <PlatformContent\n          graphs={props.graphs}\n          platform={props.platform}\n          color={props.color}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ImportMetrics;\n","import ImportMetrics from \"./components/importMetrics\";\nimport { platforms } from \"./platformConfig\";\n\nconst loadImporterMetrics = platforms.map((platform, index) => {\n  return <ImportMetrics {...platform} key={platform.platform} />;\n});\n\n/* For future use.\nconst loadAIMetrics = platforms.map((platform, index) => {\n  return <AIMetrics {...platform} key={platform.platform} />;\n});*/\n/*\n   <div className=\"ai-metrics grid grid-cols-2 gap-x-5\">\n      {loadImporterMetrics}\n    </div>\n*/\n\nconst App = () => (\n  <div className=\"p-5 mx-auto grid grid-cols-2 gap-x-10\">\n    <div className=\"importer-metrics grid grid-cols-1 gap-x-5\">\n      {loadImporterMetrics}\n    </div>\n  </div>\n);\n\nexport default App;\n","export const platforms = [\r\n  {\r\n    platform: \"facebook\",\r\n    color: \"#4267B2\",\r\n    graphs: [\r\n      {\r\n        header: \"Posts\",\r\n        total: {\r\n          type: \"post_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"post_imported\",\r\n            text: \"Avg. Posts/h\",\r\n          },\r\n        ],\r\n      },\r\n      /*{\r\n        header: \"Streams\",\r\n        total: {\r\n          type: \"stream_imported\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_stream_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"stream_imported\",\r\n            text: \"Avg. Streams/h\",\r\n          },\r\n        ],\r\n      },*/\r\n    ],\r\n  },\r\n  {\r\n    platform: \"instagram\",\r\n    color: \"#C13584\",\r\n    graphs: [\r\n      {\r\n        header: \"Posts\",\r\n        total: {\r\n          type: \"post_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"post_imported\",\r\n            text: \"Avg. Posts/h\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        header: \"Stories\",\r\n        total: {\r\n          type: \"story_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_story_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"story_created\",\r\n            text: \"Avg. Stories/h\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    platform: \"twitch\",\r\n    color: \"#6441a5\",\r\n    graphs: [\r\n      {\r\n        header: \"Clips\",\r\n        total: {\r\n          type: \"post_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"post_imported\",\r\n            text: \"Avg. Clips/h\",\r\n          },\r\n        ],\r\n      },\r\n      /*{\r\n        header: \"Streams\",\r\n        total: {\r\n          type: \"stream_imported\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_stream_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"stream_imported\",\r\n            text: \"Avg. Streams/h\",\r\n          },\r\n        ],\r\n      },*/\r\n    ],\r\n  },\r\n  {\r\n    platform: \"twitter\",\r\n    color: \"#1DA1F2\",\r\n    graphs: [\r\n      {\r\n        header: \"Posts\",\r\n        total: {\r\n          type: \"post_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"post_count\",\r\n            text: \"Avg. Posts/h\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        header: \"Metrics\",\r\n        total: {\r\n          type: \"post_metric_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_metric_handle\",\r\n            text: \"Avg. Handles/h\",\r\n          },\r\n          {\r\n            type: \"post_metric_imported\",\r\n            text: \"Avg. Posts/h\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    platform: \"youtube\",\r\n    color: \"#FF0000\",\r\n    graphs: [\r\n      {\r\n        header: \"Videos\",\r\n        total: {\r\n          type: \"post_count\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"post_imported\",\r\n            text: \"Avg. Videos/h\",\r\n          },\r\n        ],\r\n      },\r\n      /*{\r\n        header: \"Streams\",\r\n        total: {\r\n          type: \"stream_imported\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_stream_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"stream_imported\",\r\n            text: \"Avg. Streams/h\",\r\n          },\r\n        ],\r\n      },*/\r\n    ],\r\n  },\r\n  /*{\r\n    platform: \"trovo\",\r\n    color: \"#FF0000\",\r\n    graphs: [\r\n      {\r\n        header: \"Streams\",\r\n        total: {\r\n          type: \"stream_imported\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_stream_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"stream_imported\",\r\n            text: \"Avg. Streams/h\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        header: \"Clips?!?\",\r\n        total: {\r\n          type: \"post_imported\",\r\n        },\r\n        averages: [\r\n          {\r\n            type: \"process_handle\",\r\n            text: \"Avg. Channels/h\",\r\n          },\r\n          {\r\n            type: \"post_imported\",\r\n            text: \"Avg. Clips/h/h\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },*/\r\n];\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}